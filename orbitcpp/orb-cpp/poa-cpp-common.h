// -----------------------------------------------------
// generated by orbitcpp, do not edit
// -----------------------------------------------------


#ifndef ORBITCPP_IDL_POA_COMMON
#define ORBITCPP_IDL_POA_COMMON


#include <orbitcpp/orb-cpp/orbitcpp_poa.h>
#include <string.h>
#include <orbit/poa/poa.h>


// Type mapping ----------------------------------------

namespace PortableServer
{
	class ForwardRequest : public CORBA::UserException
{
public:
	// members
	::CORBA::Object_var forward_reference;

	// methods
	// copy ctor, dtor and assignment op will be auto-generated
	ForwardRequest() { }
	ForwardRequest (::CORBA::Object_ptr _par_forward_reference);

		void _raise ()
	{
		throw *this;
	}

		static ForwardRequest *_narrow (CORBA::Exception *ex)
	{
		return dynamic_cast<ForwardRequest*> (ex);
	}
	virtual char const *_orbitcpp_get_repoid() const {
		// FIXME: correct repoid
		return "ForwardRequest"; 
	}
	void _orbitcpp_set (::CORBA_Environment *ev);
	PortableServer_ForwardRequest *_orbitcpp_pack () const;
	void _orbitcpp_pack (PortableServer_ForwardRequest &) const;
	void _orbitcpp_unpack (const PortableServer_ForwardRequest &);
};

const ::CORBA::TypeCode_ptr _tc_ForwardRequest = (::CORBA::TypeCode_ptr)TC_PortableServer_ForwardRequest;

} //namespace PortableServer

inline void operator <<= (CORBA::Any& the_any, ::PortableServer::ForwardRequest const &val)
{
	the_any.insert_simple ((CORBA::TypeCode_ptr)TC_PortableServer_ForwardRequest, val._orbitcpp_pack(), false);

}

inline bool operator >>= (const CORBA::Any& the_any, ::PortableServer::ForwardRequest &val)
{
	const PortableServer_ForwardRequest *ex;
		if (the_any.extract_ptr ((CORBA::TypeCode_ptr)TC_PortableServer_ForwardRequest, ex))
	{
		val._orbitcpp_unpack (*ex);		return true;
	} else {
		return false;
	}
}


#endif
