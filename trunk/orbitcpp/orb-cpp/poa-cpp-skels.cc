// -----------------------------------------------------
// generated by orbitcpp, do not edit
// -----------------------------------------------------


#include "poa-cpp-skels.h"

// FIXME
#define POA_PortableServer_ServantActivator__init PortableServer_ServantBase__init
#define POA_PortableServer_ServantActivator__fini PortableServer_ServantBase__fini
#define POA_PortableServer_ServantLocator__init PortableServer_ServantBase__init
#define POA_PortableServer_ServantLocator__fini PortableServer_ServantBase__fini


// Skeleton code ---------------------------------------

::PortableServer_ServantBase__epv POA_PortableServer::ServantActivator::_base_epv = {
	NULL, // _private
	::POA_PortableServer::ServantActivator::_orbitcpp_fini,
	NULL  // _default_POA
};

POA_PortableServer_ServantManager__epv POA_PortableServer::ServantActivator::_PortableServer_ServantManager_epv = {
	        0, // _private
}; 

POA_PortableServer_ServantActivator__epv POA_PortableServer::ServantActivator::_PortableServer_ServantActivator_epv = {
	0, // _private
	::POA_PortableServer::ServantActivator::_skel_incarnate,
	::POA_PortableServer::ServantActivator::_skel_etherialize,
};

POA_PortableServer_ServantActivator__vepv POA_PortableServer::ServantActivator::_vepv = {
	&::POA_PortableServer::ServantActivator::_base_epv,
	&_PortableServer_ServantManager_epv,
	&_PortableServer_ServantActivator_epv
};

	void POA_PortableServer::ServantActivator::_orbitcpp_fini (::PortableServer_Servant servant, ::CORBA_Environment *ev)
{
	//Call C _fini():
	POA_PortableServer_ServantActivator__fini (servant, ev);

	//Do C++-specific stuff:
	ORBITCPP_IMPL(servant)->_remove_ref();
}

PortableServer_Servant POA_PortableServer::ServantActivator::_skel_incarnate (::PortableServer_Servant _servant,const PortableServer_ObjectId* oid, PortableServer_POA poa, ::CORBA_Environment *_ev) throw ()
{
	::PortableServer::POA_var _cpp_poa = new ::PortableServer::POA(poa);
	PortableServer::ObjectId _cpp_oid; _cpp_oid._orbitcpp_unpack(*oid);
	::PortableServer::Servant _retval;

	try {
		::POA_PortableServer::ServantActivator *_self = ORBITCPP_IMPL(_servant);
		 _retval = _self->incarnate (_cpp_oid, _cpp_poa.in());
	}
	catch (CORBA::Exception &_ex) {
		_ex._orbitcpp_set (_ev);
		typedef PortableServer_Servant t;
		return t();
	}
	return _retval;
}

	void POA_PortableServer::ServantActivator::_skel_etherialize (::PortableServer_Servant _servant,const PortableServer_ObjectId* oid, PortableServer_POA poa, PortableServer_Servant servant, const CORBA_boolean cleanup_in_progress, const CORBA_boolean remaining_activations, ::CORBA_Environment *_ev) throw ()
{
	::PortableServer::POA_var _cpp_poa = new ::PortableServer::POA(poa);
	PortableServer::ObjectId _cpp_oid; _cpp_oid._orbitcpp_unpack(*oid);

	try {
		::POA_PortableServer::ServantActivator *_self = ORBITCPP_IMPL(_servant);
		PortableServer::Servant _cpp_servant = ORBITCPP_IMPL2(_orbitcpp::UnknownServant, servant);
		_self->etherialize (_cpp_oid, _cpp_poa.in(), _cpp_servant, cleanup_in_progress, remaining_activations);
	}
	catch (CORBA::Exception &_ex) {
		_ex._orbitcpp_set (_ev);
		typedef void t;
		return t();
	}
}

	::POA_PortableServer::ServantActivator::ServantActivator ()
	:	m_target(&_vepv, this, (_orbitcpp_Servant::init_fn)(&POA_PortableServer_ServantActivator__init))
{
}

	/*::CORBA::Object_ptr POA_PortableServer::ServantActivator::_this()
{
	PortableServer::POA_var rootPOA = _default_POA ();

	return rootPOA->servant_to_reference (this);
}*/

::PortableServer_ServantBase__epv POA_PortableServer::ServantLocator::_base_epv = {
	NULL, // _private
	::POA_PortableServer::ServantLocator::_orbitcpp_fini,
	NULL  // _default_POA
};

POA_PortableServer_ServantManager__epv POA_PortableServer::ServantLocator::_PortableServer_ServantManager_epv = {
	        0, // _private
}; 

POA_PortableServer_ServantLocator__epv POA_PortableServer::ServantLocator::_PortableServer_ServantLocator_epv = {
	0, // _private
	::POA_PortableServer::ServantLocator::_skel_preinvoke,
	::POA_PortableServer::ServantLocator::_skel_postinvoke,
};

POA_PortableServer_ServantLocator__vepv POA_PortableServer::ServantLocator::_vepv = {
	&::POA_PortableServer::ServantLocator::_base_epv,
	&_PortableServer_ServantManager_epv,
	&_PortableServer_ServantLocator_epv
};

	void POA_PortableServer::ServantLocator::_orbitcpp_fini (::PortableServer_Servant servant, ::CORBA_Environment *ev)
{
	//Call C _fini():
	POA_PortableServer_ServantLocator__fini (servant, ev);

	//Do C++-specific stuff:
	ORBITCPP_IMPL(servant)->_remove_ref();
}

	PortableServer_Servant POA_PortableServer::ServantLocator::_skel_preinvoke (::PortableServer_Servant _servant,const PortableServer_ObjectId* oid, PortableServer_POA poa, CORBA_char *operation, PortableServer_ServantLocator_Cookie *cookie, ::CORBA_Environment *_ev) throw ()
{
	::PortableServer::POA_var _cpp_poa = new ::PortableServer::POA(poa);
	PortableServer::ObjectId _cpp_oid; _cpp_oid._orbitcpp_unpack(*oid);
	::PortableServer::Servant _retval;

	try {
		::POA_PortableServer::ServantLocator *_self = ORBITCPP_IMPL(_servant);
		 _retval = _self->preinvoke (_cpp_oid, _cpp_poa.in(), operation, (void*&) *cookie);
	}
	catch (CORBA::Exception &_ex) {
		_ex._orbitcpp_set (_ev);
		typedef PortableServer_Servant t;
		return t();
	}
	return _retval;
}

	void POA_PortableServer::ServantLocator::_skel_postinvoke (::PortableServer_Servant _servant,const PortableServer_ObjectId* oid, PortableServer_POA poa, CORBA_char *operation, const PortableServer_ServantLocator_Cookie cookie, PortableServer_Servant servant, ::CORBA_Environment *_ev) throw ()
{
	::PortableServer::POA_var _cpp_poa = new PortableServer::POA(poa);
	PortableServer::ObjectId _cpp_oid; _cpp_oid._orbitcpp_unpack(*oid);
	::PortableServer::Servant _cpp_servant = ORBITCPP_IMPL2(_orbitcpp::UnknownServant, servant);

	try {
		::POA_PortableServer::ServantLocator *_self = ORBITCPP_IMPL(_servant);
		_self->postinvoke (_cpp_oid, _cpp_poa.in(), operation, cookie, _cpp_servant);
	}
	catch (CORBA::Exception &_ex) {
		_ex._orbitcpp_set (_ev);
		typedef void t;
		return t();
	}
}

	::POA_PortableServer::ServantLocator::ServantLocator ()
	:	m_target(&_vepv, this, (_orbitcpp_Servant::init_fn)(&POA_PortableServer_ServantLocator__init))
{
}

/* CORBA::Object_ptr POA_PortableServer::ServantLocator::_this()
{
	PortableServer::POA_var rootPOA = _default_POA ();

	return rootPOA->servant_to_reference (this);
}*/

